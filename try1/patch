diff --git a/pexpect/pxshell.py b/pexpect/pxshell.py
index 8d9f0c1..eaece54 100644
--- a/pexpect/pxshell.py
+++ b/pexpect/pxshell.py
@@ -209,96 +209,6 @@ class pxshell (spawn):
             return True
         return False
 
-    def login (self,
-               executable, options='',
-               username='', password='',
-               login_timeout=1,
-               auto_prompt_reset=True,
-               sync_multiplier=1):
-        '''This logs the user into the given server.
-
-        It uses
-        'original_prompt' to try to find the prompt right after login. When it
-        finds the prompt it immediately tries to reset the prompt to something
-        more easily matched. The default 'original_prompt' is very optimistic
-        and is easily fooled. It's more reliable to try to match the original
-        prompt as exactly as possible to prevent false matches by server
-        strings such as the "Message Of The Day". On many systems you can
-        disable the MOTD on the remote server by creating a zero-length file
-        called :file:`~/.hushlogin` on the remote server. If a prompt cannot be found
-        then this will not necessarily cause the login to fail. In the case of
-        a timeout when looking for the prompt we assume that the original
-        prompt was so weird that we could not match it, so we use a few tricks
-        to guess when we have reached the prompt. Then we hope for the best and
-        blindly try to reset the prompt to something more unique. If that fails
-        then login() raises an :class:`ExceptionPxssh` exception.
-
-        In some situations it is not possible or desirable to reset the
-        original prompt. In this case, pass ``auto_prompt_reset=False`` to
-        inhibit setting the prompt to the UNIQUE_PROMPT. Remember that pxssh
-        uses a unique prompt in the :meth:`prompt` method. If the original prompt is
-        not reset then this will disable the :meth:`prompt` method unless you
-        manually set the :attr:`PROMPT` attribute.
-        '''
-        print("pxshell::login()")
-        # archive the options
-        self.login_timeout = login_timeout
-        self.sync_multiplier = sync_multiplier        
-
-        # double check
-        if executable == '':
-            raise ExceptionPxShell('Unconfigured child application: %s' % executable)
-
-        # keep this simple in here
-        cmd = executable + ' ' + options
-
-        # fire it up.
-        spawn._spawn(self, cmd)
-
-        # run the login sequence...
-        self._login_state_machine(username, password)
-
-        # try to resolve the interface
-        if not self.sync_original_prompt(self.sync_multiplier):
-            self.close()
-            raise ExceptionPxShell('could not synchronize with original prompt')
-
-        # We appear to be in.
-        # set shell prompt to something unique.
-        if auto_prompt_reset:
-            if not self.set_unique_prompt():
-                self.close()
-                raise ExceptionPxShell('could not set shell prompt '
-                                        '(recieved: %r, expected: %r).' % (
-                                            self.before,
-                                            self.interpreter.unique_prompt(),))
-
-        # update to the prompt
-        newinfo = self.prompt(timeout=0.1)
-
-
-    def _login_state_machine(self, username, password):
-        '''Sequence of steps to "login"'''
-        print("pxshell::_login_state_machine()")
-        # work on assumption of "basic" login steps
-        self.expect( [ "(?i)(?:login)", "(?i)(?:user\s*name)", TIMEOUT ], timeout=self.login_timeout )
-        self.sendline(username)
-        self.expect( [ "(?i)(?:password)", TIMEOUT ], timeout=self.login_timeout )
-        self.sendline(password)
-
-
-    def logout (self):
-        '''Sends exit to the remote shell.
-
-        If there are stopped jobs then this automatically sends exit twice.
-        '''
-        self.sendline("exit")
-        index = self.expect([EOF, "(?i)there are stopped jobs"])
-        if index==1:
-            self.sendline("exit")
-            self.expect(EOF)
-        self.close()
-
     def prompt(self, timeout=-1):
         '''Match the next shell prompt.
 
diff --git a/pexpect/pxssh.py b/pexpect/pxssh.py
index d53a5e3..20e2d5b 100644
--- a/pexpect/pxssh.py
+++ b/pexpect/pxssh.py
@@ -20,11 +20,15 @@ PEXPECT LICENSE
 
 '''
 
+from future.builtins import super
+
 from pexpect import ExceptionPexpect, TIMEOUT, EOF
 from pexpect.pxshell import pxshell, ExceptionPxShell
 import time
 import os
 
+from pxtransport import pxtransport
+
 __all__ = ['ExceptionPxssh', 'pxssh']
 
 # Exception classes used by this module.
@@ -32,65 +36,19 @@ class ExceptionPxssh(ExceptionPxShell):
     '''Raised for pxssh exceptions.
     '''
 
+class pxsshtransport(pxtransport):
+    '''SSH customized transport.'''
 
-class pxssh (pxshell):
-    '''This class extends pexpect.spawn to specialize setting up SSH
-    connections. This adds methods for login, logout, and expecting the shell
-    prompt. It does various tricky things to handle many situations in the SSH
-    login process. For example, if the session is your first login, then pxssh
-    automatically accepts the remote certificate; or if you have public key
-    authentication setup then pxssh won't wait for the password prompt.
-
-    pxssh uses the shell prompt to synchronize output from the remote host. In
-    order to make this more robust it sets the shell prompt to something more
-    unique than just $ or #. This should work on most Borne/Bash or Csh style
-    shells.
-
-    Example that runs a few commands on a remote server and prints the result::
-
-        import pxssh
-        import getpass
-        try:
-            s = pxssh.pxssh()
-            hostname = raw_input('hostname: ')
-            username = raw_input('username: ')
-            password = getpass.getpass('password: ')
-            s.login(hostname, username, password)
-            s.sendline('uptime')   # run a command
-            s.prompt()             # match the prompt
-            print(s.before)        # print everything before the prompt.
-            s.sendline('ls -l')
-            s.prompt()
-            print(s.before)
-            s.sendline('df')
-            s.prompt()
-            print(s.before)
-            s.logout()
-        except pxssh.ExceptionPxssh as e:
-            print("pxssh failed on login.")
-            print(e)
-
-    Note that if you have ssh-agent running while doing development with pxssh
-    then this can lead to a lot of confusion. Many X display managers (xdm,
-    gdm, kdm, etc.) will automatically start a GUI agent. You may see a GUI
-    dialog box popup asking for a password during development. You should turn
-    off any key agents during testing. The 'force_password' attribute will turn
-    off public key authentication. This will only work if the remote SSH server
-    is configured to allow password logins. Example of using 'force_password'
-    attribute::
-
-            s = pxssh.pxssh()
-            s.force_password = True
-            hostname = raw_input('hostname: ')
-            username = raw_input('username: ')
-            password = getpass.getpass('password: ')
-            s.login (hostname, username, password)
-    '''
+    def __init__(self, cwd=None, env=None, log=None):
+        super().__init__(cwd=cwd, env=env, log=log)
 
+class pxsshlogin(pxlogin):
+    '''SSHd login methodology'''
+
+    #def __init__(self, transport, interpreter, timeout=30):
     def __init__ (self, timeout=30, maxread=2000, searchwindowsize=None,
                     logfile=None, cwd=None, env=None, interpreter=None):
-
-        pxshell.__init__(self, timeout=timeout, maxread=maxread, searchwindowsize=searchwindowsize, logfile=logfile, cwd=cwd, env=env, interpreter=interpreter)
+        super().__init__()
         
         self.name = '<pxssh>'
         self.SSH_OPTS =  [
